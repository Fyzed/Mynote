 	mozilla


	引入js的方法

		script标签引入

		<scrip src="text.js"></script>


		html内部script标签

		使用内部方法动态插入

		document.write("<script src='text.js'><\/script>")


	js事件


	onmouseover 鼠标移动上去触发

	onmouseout  鼠标移开


	html > head > style  | script

		>body > div | p | ul

	页面js加载顺序，从上往下解析
		
		可以在页面最后引入js body结束标签前

		widow.onload 当前页面加载完成之后执行

	function 函数的声明

		一样的代码可以放到一个function里面，需要用到的时候直接调用

		结构：	function 函数名（）{ }
		
		调用： 函数名（）；
	function fn1(){
		document.getElementById(‘id名’).style.display="nonoe";
}


 document.getElementById(id名).onmouseover = function(){
		fn1();//调用函数
		
}

    匿名函数

	类似事件后面执行的函数，就是一个匿名函数（没有函数名）

			

   变量声明

	通过var声明一个变量，可以在其他地方调用


	变量的三种类型

		number	数字类型

		string 	字符串类型，需要用双引号或者单引号括起来

		Boolean	布尔值类型，true / false


   	查找元素方法（PC端可以用这两种 没有兼容性问题）

		document.gtElementById(ID)

		document.gerElementsByTagName(TAGNAME) // "body" "div" "span"

			通过传入元素标签名来查找
			返回集合（数组）；需要通过下标（索引）来制定某个元素，下表初始值是0；

	不支持IE8以下（移动端可以随便用以下几种）

		getElementsByClassName(classname) //"header" "main"
			通过传入class类名来查找
		返回集合（数组）；需要通过下标（索引）来制定某个元素，下表初始值是0；

		document.querySelector(#ID | .classname|标签名)
		只返回一个值，如果有多个class的时候只返回第一个
		ID前面必须加#号
		class前面必须加点

		document.querySelectorAll(.classname)

		通过class查找返回一组元素
		需要通过下标（索引）来制定某个元素，下表初始值是0；



	事件里的this

		表示触发事件的元素

	
	innerHTML 

	修改元素里的所有内容

	if else条件判断
	
	if(条件判断[表达式]){

	}else{

	}

	switch 条件判断	

	number = 1;
	switch(number){
		case 1:
			alert(111);
			break;
		case 2:
			alert(22);
			break;
		default:
			alert("null");
	}


	for循环

		var object ={
			a:"aa",
			b:"bb",
			c:"cc"
			}

		//object[key] 这里必须要用中括号，不能用object.keyye

	for(key in  object){
		console.log(key,object[key])
		}
	for in  循环对象  for(var key  in object)


	for（变量声明；条件判断；变量自增或自减；）{

		//内容
		}
	变量可以在外面声明

		var i = 0;
		for(；i<10；i++){}

		变量的自增可以写在判断里
		for（；i++<10；）{}

		必须加上分号


	while（条件）{}

	for while 区别：

		知道要循环次数的用for循环；
		不确定循环次数的用while循环；


	自执行函数

	（function（num{
			
		}）(num);




	a++表示自增1

	a--表示自减1

	a+=b 等于 a=a+b;
 
	a-=b 等于 a=a-b;



	基础概念

	JS必须区分大小写

	js变量命名

		必须以字母开头、下划线和美元符号$

	js注释

		单行注释 //
		多行注释/* */

	js语句

		每一句js后面度必须加上分好（；），大括号（{}）

		后面可以不加

	if 不加大括号写法：

	if（1>2） alert(true);不加大括号必须写在一行

	判断里有多行内容 必须加上大括号

	typeof A : 用来判断A的类型；

	parseInt() 把浮点数 或者 字符串转换成整数；

	parseFloat() 不但能解析浮点数，也能解析整数；在不确定情况下用parseFloat

	number（）

	NAN not a number  NaN都是不相等的

	isNaN	


	String类型：

		String(thing) thing可以代表任何东西

		number + string  回先把number转换成字符串在相加

		字符串内部单双引号冲突了里有使用反斜杠转义引号

		\’ ，\" , \r, \n, \t；


		字符串的连接

		可以用+号连接

		反斜杠\连接

		var bg = 'aaa\
			  bbb';

	字符串可以判断是否相等 “haishen” == "haishen"  //true


	string.length 可以获取字符串的长度


  字符串的截取


	slice（0,10）截取0,10的字符。返回时新的字符串
		 数字 是字母之间的间隔 ；0是a前面的间隔 （1.3）打印出来的就是(bd)了
	var a = "abdcef"

	var newA= a.slice(0,3)

	console.log(newA); 打印出来的是abd;

	substr(1,5) 1表示开始位置，5表示截取的长度

	substring(0,10) 截取0,10的字符

	charAt() 获取指定位置的字符串 （index） index=0.1.2.3....

	concat() 连接字符串  （str1.concat(str2)）

	indexOf() 查找数组的某个元素的索引值 即下标 也是从 0 开始（检索字符串）

	match()  找到一个或多个正则表达式的匹配

	replace()  可以替换数组中的字符串 （正则表达式）
			格式 var aa="hello world"  aa.replace("ling","hello") --> ling world.

	search() 查找数组字符串的位置值 下标从0 开始 会识别空格 （检索与正则表达式相匹配的值）

	slice（0,10）截取0,10的字符。返回是新的字符串

	split()  把字符串转换成数组 （“”，number）里面的number表示分割出多少个元素

	substring(0,10) 截取0,10的字符 提取字符串中两个指定的索引号之间的字符

	toLowerCase() 把字符串转换为小写

	toUpperCase() 把字符串转换为大写



  undefined类型

	如果定义一个空值参数，那么这个值为undefined；

	(如果定义了这样一个变量：var undefined=‘11’；如果在window环境下打印的话，这个undefined的
	的值会恒等于undefined，但是如果是在一个函数里面打印的话 就会变成一个属性值即11.)

	undefined不属于关键字，值在函数里可以修改；

	判断一个值是否等于undefined 不能使用等号，要使用typeof

	if（typeof.参数 != undefined）{} != 意思是不等于

	
	基本数据类型

	Number，String, Boolean , Undefined . null


	复杂数据类型

	object（数组，函数，对象）


	数组：

		两种创建数组的方法

		var arr=[];

		var arr=new Array();

		访问数组最后一个元素

		arr[arr.length-1]

		数组循环
			for while

			for Each

			map 和each一样IE8不兼容 IE9可以

		push（） 在数组最后添加新元素（成员）

		pop（）	 删除数组最后一个元素

		unshift() 在元素第一个位置添加新元素

		shift（） 删除第一个元素

		join（）  把数组的所有元素通过join的参数拼接

		indexOf（）   查找数组某个元素的索引值

		splice（）  删除数组某个元素

		splice（1,0） 第二个参数为0，则表示不删除 然后加上第三个参数的

				的话会向数组里面添加元素 如：splice（1,0，‘red’）

				如果参数为1的话，就表示删除


		把集合转换成数组的方法

		 定义一个空数组，通过for循环来转换 用到push


	object
		和数组区别：

			数组是有序的

				数组的索引是从0开始的

			对象是无序的

				对象的索引是对象的属性

			var compute = {

				name : “清华同方”，

				CPU ： “I3”，

				memory：“400G”，
		
				0:“1990”

			}
			对象里面的最后一个属性不要加逗号！！！

	
	function 类型  函数里面的参数就是一个变量

	    两种声明函数的方法：

		1、function change(){}

		2、var change = function(){}

			var compute ={

				off:function(){
					console.log("开始")；
				}
		
			}


	   函数return 关键字

		函数返回内容；

		function say(word){

			console.log(word);

			return true;

					}


		函数 arguments 关键字

		是一个数组，访问函数传递的参数


	Math 对象


		abs(x) 	返回数的绝对值

		random() 返回0-1之间的随机数

		round（x）把数四舍五入为最接近的整数

		floor（x）对数进行下舍入


	引用类型 （常用的：function array abject）

	引用类型 == 复杂类型

	基本数据类型和引用类型的区别


		基本数据类型存放在栈内存，变量之间的赋值是通过新建一个值 原来的那个值是不会改变的。


		引用类型存放在堆内存，变量通过内存地址的来引用，如果有多个变量引用一个内存地址

		那么修改会影响其他引用


	作用域：

		函数内部声明的变量叫局部变量，外面无法获取；

		在script标签外层定义的变量叫全局变量；


	js关键字

		break  do  instanceof  typeof

		case else new void catch finally

		return  var  continue for withch

		while  debugger*  function this with

		default if throw delete in try


	一元操作符；
	
		var a = 1;

		a++:

		+=a:



	三元操作符


	if（1<2）{

		alert(1)
	}else{

		alert(2)
	}

	条件判断？ 为true触发 ：为false触发；

	三元运算的嵌套

		3<2 ? console.log(true) : 1<2 ? console.log(1):console.log(2);

		1<2? alert(1）：alert（2）；



	http://www.ituring.com.cn/article/197347



	逻辑运算符


	&& 并且		只要有一个是false，那么结果就为false

			并且里的每一个表达式都会执行 

	|| 或者		只要有一个结果是true，那么结果就是true

			从左往右判断，只要有一个结果是true，那么后面的表达式就不会执行



	! 布尔值取反   (!true)-->结果出来就是false


 	&& 优先级比||高；先判断并且在判断或者

		

		









































